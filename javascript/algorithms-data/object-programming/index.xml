<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面向对象编程 on codthing</title>
    <link>https://codthing.github.io/javascript/algorithms-data/object-programming/</link>
    <description>Recent content in 面向对象编程 on codthing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>&amp;copy;{year}, codthing</copyright>
    <lastBuildDate>Tue, 28 Jan 2020 00:34:39 +0900</lastBuildDate>
    
        <atom:link href="https://codthing.github.io/javascript/algorithms-data/object-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>基本的JS对象（字面量对象）</title>
        <link>https://codthing.github.io/javascript/algorithms-data/object-programming/create-object/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://codthing.github.io/javascript/algorithms-data/object-programming/create-object/</guid>
        <description>一、创建对象（字面量对象） 1 2 3 4 let duck = { name: &amp;#34;Aflac&amp;#34;, numLegs: 2 } 这个 duck 对象有两组键值对：一个是 name 属性，它的值是 Aflac；另一个是 numLegs 属性，它的值是 2。 二</description>
      </item>
      
      <item>
        <title>构造函数</title>
        <link>https://codthing.github.io/javascript/algorithms-data/object-programming/constructor-fn/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://codthing.github.io/javascript/algorithms-data/object-programming/constructor-fn/</guid>
        <description>一、定义构造函数 Constructors 是创建对象的函数。 函数给这个新对象定义属性和行为。 可将它们视为创建的新对象的蓝图。 1 2 3 4 5 function Bird() { this.name = &amp;#34;Albert&amp;#34;; this.color = &amp;#34;blue&amp;#34;; this.numLegs = 2; } 这个</description>
      </item>
      
      <item>
        <title>原型</title>
        <link>https://codthing.github.io/javascript/algorithms-data/object-programming/prototype/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://codthing.github.io/javascript/algorithms-data/object-programming/prototype/</guid>
        <description>一、了解自有属性 hasOwnProperty 下面的实例，Bird 构造函数定义了两个属性：name 和 numLegs： 1 2 3 4 5 6 7 8 function Bird(name) { this.name = name; this.numLegs = 2; } let duck = new Bird(&amp;#34;Donald&amp;#34;); let canary =</description>
      </item>
      
      <item>
        <title>IIFE</title>
        <link>https://codthing.github.io/javascript/algorithms-data/object-programming/iife/</link>
        <pubDate>Tue, 28 Jan 2020 00:34:39 +0900</pubDate>
        
        <guid>https://codthing.github.io/javascript/algorithms-data/object-programming/iife/</guid>
        <description>一、了解立即调用函数表达（IIFE） JavaScript 中的一个常见模式就是，函数在声明后立刻执行： 1 2 3 4 (function () { console.log(&amp;#34;Chirp, chirp!&amp;#34;); })(); 这是一个匿名函数表达式，立即执行并输出</description>
      </item>
      
    
  </channel>
</rss>